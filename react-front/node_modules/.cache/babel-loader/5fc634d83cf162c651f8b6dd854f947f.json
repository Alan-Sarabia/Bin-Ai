{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/Documentos/GitHub/uno/react-front/src/components/pages/Button.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useReducer } from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport * as tf from '@tensorflow/tfjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst machine = {\n  initial: \"initial\",\n  states: {\n    initial: {\n      on: {\n        next: \"loadingModel\"\n      }\n    },\n    loadingModel: {\n      on: {\n        next: \"modelReady\"\n      }\n    },\n    modelReady: {\n      on: {\n        next: \"imageReady\"\n      }\n    },\n    imageReady: {\n      on: {\n        next: \"identifying\"\n      },\n      showImage: true\n    },\n    identifying: {\n      on: {\n        next: \"complete\"\n      }\n    },\n    complete: {\n      on: {\n        next: \"modelReady\"\n      },\n      showImage: true,\n      showResults: true\n    }\n  }\n};\n\nfunction App() {\n  _s();\n\n  tf.setBackend(\"cpu\");\n  const [results, setResults] = useState([]);\n  const [imageURL, setImageURL] = useState(null);\n  const [model, setModel] = useState(null);\n  const imageRef = useRef();\n  const inputRef = useRef();\n\n  const reducer = (state, event) => machine.states[state].on[event] || machine.initial;\n\n  const [appState, dispatch] = useReducer(reducer, machine.initial);\n\n  const next = () => dispatch(\"next\");\n\n  const loadModel = async () => {\n    next();\n    const model = await mobilenet.load();\n    setModel(model);\n    next();\n  };\n\n  const identify = async () => {\n    next();\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n    next();\n  };\n\n  const reset = async () => {\n    setResults([]);\n    next();\n  };\n\n  const upload = () => inputRef.current.click();\n\n  const handleUpload = event => {\n    const {\n      files\n    } = event.target;\n\n    if (files.length > 0) {\n      const url = URL.createObjectURL(event.target.files[0]);\n      setImageURL(url);\n      next();\n    }\n  };\n\n  const actionButton = {\n    initial: {\n      action: loadModel,\n      text: \"Load Model\"\n    },\n    loadingModel: {\n      text: \"Loading Model...\"\n    },\n    modelReady: {\n      action: upload,\n      text: \"Upload Image\"\n    },\n    imageReady: {\n      action: identify,\n      text: \"Identify Breed\"\n    },\n    identifying: {\n      text: \"Identifying...\"\n    },\n    complete: {\n      action: reset,\n      text: \"Reset\"\n    }\n  };\n  const {\n    showImage,\n    showResults\n  } = machine.states[appState];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showImage && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imageURL,\n      alt: \"upload-preview\",\n      ref: imageRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      capture: \"camera\",\n      onChange: handleUpload,\n      ref: inputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), showResults && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: results.map(({\n        className,\n        probability\n      }) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: `${className}: %${(probability * 100).toFixed(2)}`\n      }, className, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: actionButton[appState].action || (() => {}),\n      children: actionButton[appState].text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"QcFBbYLF6iwy/GQ02PDUDwr6+Hc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/gabriel/Documentos/GitHub/uno/react-front/src/components/pages/Button.js"],"names":["React","useState","useRef","useReducer","mobilenet","tf","machine","initial","states","on","next","loadingModel","modelReady","imageReady","showImage","identifying","complete","showResults","App","setBackend","results","setResults","imageURL","setImageURL","model","setModel","imageRef","inputRef","reducer","state","event","appState","dispatch","loadModel","load","identify","classify","current","reset","upload","click","handleUpload","files","target","length","url","URL","createObjectURL","actionButton","action","text","map","className","probability","toFixed"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useReducer } from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport * as tf from '@tensorflow/tfjs'\n\n\n\n\n\n\nconst machine = {\n  initial: \"initial\",\n  states: {\n    initial: { on: { next: \"loadingModel\" } },\n    loadingModel: { on: { next: \"modelReady\" } },\n    modelReady: { on: { next: \"imageReady\" } },\n    imageReady: { on: { next: \"identifying\" }, showImage: true },\n    identifying: { on: { next: \"complete\" } },\n    complete: { on: { next: \"modelReady\" }, showImage: true, showResults: true }\n  }\n};\n\nfunction App() {\n  tf.setBackend(\"cpu\");\n  const [results, setResults] = useState([]);\n  const [imageURL, setImageURL] = useState(null);\n  const [model, setModel] = useState(null);\n  const imageRef = useRef();\n  const inputRef = useRef();\n\n  const reducer = (state, event) =>\n    machine.states[state].on[event] || machine.initial;\n\n  const [appState, dispatch] = useReducer(reducer, machine.initial);\n  const next = () => dispatch(\"next\");\n\n  const loadModel = async () => {\n    next();\n    const model = await mobilenet.load();\n    setModel(model);\n    next();\n  };\n\n  const identify = async () => {\n    next();\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n    next();\n  };\n\n  const reset = async () => {\n    setResults([]);\n    next();\n  };\n\n  const upload = () => inputRef.current.click();\n\n  const handleUpload = event => {\n    const { files } = event.target;\n    if (files.length > 0) {\n      const url = URL.createObjectURL(event.target.files[0]);\n      setImageURL(url);\n      next();\n    }\n  };\n\n  const actionButton = {\n    initial: { action: loadModel, text: \"Load Model\" },\n    loadingModel: { text: \"Loading Model...\" },\n    modelReady: { action: upload, text: \"Upload Image\" },\n    imageReady: { action: identify, text: \"Identify Breed\" },\n    identifying: { text: \"Identifying...\" },\n    complete: { action: reset, text: \"Reset\" }\n  };\n\n  const { showImage, showResults } = machine.states[appState];\n\n  return (\n    <div>\n      {showImage && <img src={imageURL} alt=\"upload-preview\" ref={imageRef} />}\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        capture=\"camera\"\n        onChange={handleUpload}\n        ref={inputRef}\n      />\n      {showResults && (\n        <ul>\n          {results.map(({ className, probability }) => (\n            <li key={className}>{`${className}: %${(probability * 100).toFixed(\n              2\n            )}`}</li>\n          ))}\n        </ul>\n      )}\n      <button onClick={actionButton[appState].action || (() => {})}>\n        {actionButton[appState].text}\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}